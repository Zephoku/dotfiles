#include <stdio.h>
#include <string.h>
#include <sys/stat.h>
#include <ctype.h>
#include <sys/types.h>   // definitions of a number of data types used in socket.h and netinet/in.h
#include <sys/socket.h>  // definitions of structures needed for sockets, e.g. sockaddr
#include <netinet/in.h>  // constants and structures needed for internet domain addresses, e.g. sockaddr_in
#include <stdlib.h>
#include <strings.h>
#include <math.h>
#include <sys/wait.h>	/* for the waitpid() system call */
#include <signal.h>	/* signal name macros, and the kill() prototype */

#define REQ_BUF_SIZE 512

void sendResponse(int); /* function prototype */

void sigchld_handler(int s)
{
  while(waitpid(-1, NULL, WNOHANG) > 0);
}

void error(char *msg)
{
  perror(msg);
  exit(1);
}

int main(int argc, char *argv[])
{
  int socketfd, clientSocket, port, pid;
  socklen_t clilen;
  struct sockaddr_in serv_addr, cli_addr;
  struct sigaction sa;          // for signal SIGCHLD

  if (argc < 2) {
    fprintf(stderr,"ERROR, no port provided\n");
    exit(1);
  }
  socketfd = socket(AF_INET, SOCK_STREAM, 0);
  if (socketfd < 0) 
    error("ERROR opening socket");
  bzero((char *) &serv_addr, sizeof(serv_addr));
  port = atoi(argv[1]);
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_addr.s_addr = INADDR_ANY;
  serv_addr.sin_port = htons(port);

  if (bind(socketfd, (struct sockaddr *) &serv_addr,
        sizeof(serv_addr)) < 0) 
    error("ERROR on binding");

  listen(socketfd,5);

  clilen = sizeof(cli_addr);

  /****** Kill Zombie Processes ******/
  sa.sa_handler = sigchld_handler; // reap all dead processes
  sigemptyset(&sa.sa_mask);
  sa.sa_flags = SA_RESTART;
  if (sigaction(SIGCHLD, &sa, NULL) == -1) {
    perror("sigaction");
    exit(1);
  }
  /*********************************/

  while (1) {
    clientSocket = accept(socketfd, (struct sockaddr *) &cli_addr, &clilen);

    if (clientSocket < 0) 
      error("ERROR on accept");

    pid = fork(); //create a new process
    if (pid < 0)
      error("ERROR on fork");

    if (pid == 0)  { // fork() returns a value of 0 to the child process
      close(socketfd);
      sendResponse(clientSocket);
      exit(0);
    }
    else //returns the process ID of the child process to the parent
      close(clientSocket); // parent doesn't need this 
  } /* end of while */
  return 0; /* we never get here */
}

void sendResponse (int socket)
{
  FILE* file;
  int status, filesize, filesizeLen, lineLength;
  char* filebuf, *getAddress, *filetype, *response;
  char buffer[REQ_BUF_SIZE];
  bzero(buffer,REQ_BUF_SIZE);
  char* ok_header =
    "HTTP/1.1 200 OK\r\n"
    "Date: Tue, 09 Aug 2011 15:44:04 GMT\r\n"
    "Server: CS118Server (Ubuntu)\r\n"
    "Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT\r\n";
  char* contentType = 
    "Content-Type: ";
  char* typeHTML = "text/html";
  char* typeJPEG = "image/jpeg";
  char* typeGIF = "image/gif";
  char* contentLength = 
    "Content-Length: ";

  char* file_not_found_response = 
    "HTTP/1.1 404 Not Found\n"
    "Content-type: text/html\n"
    "\n"
    "<html>\n"
    " <body>\n"
    "  <h1>404 File Not Found</h1>\n"
    "  <p>The requested URL was not found on this server</p>\n"
    " </body>\n"
    "</html>\n";

  // Read Request
  status = read(socket,buffer,REQ_BUF_SIZE);
  if (status < 0) 
    error("ERROR reading from socket");
  printf("%s\n",buffer);

  // Parse Request
  lineLength = strstr(buffer, "HTTP") - strstr(buffer, "/") - 2;
  getAddress = malloc(lineLength);
  strncpy(getAddress, strstr(buffer, "/")+1, lineLength);
  filetype = strstr(getAddress, ".") +1;

  // Convert filetype to lowercase
  int i;
  for(i = 0; i < strlen(filetype); i++){
    filetype[i] = tolower(filetype[i]);
  }

  file = fopen(getAddress, "rb");
  if (file!=NULL)
  {
    // Get filesize
    struct stat st;
    stat(getAddress, &st);
    filesize = st.st_size;
    filesizeLen = (int)floor(log10((float)filesize)) + 1;

    // Read File
    char* fileContent = malloc(filesize);
    filebuf = malloc(filesize);
    fread(fileContent, filesize, 1, file);
    fclose(file);
    size_t headerSize, responseSize;
    char *header;

    //Create response
    if(strncmp(filetype, "html", 4) == 0) {
      responseSize = strlen(ok_header) + strlen(contentType) + strlen(typeHTML) 
                   + strlen(contentLength) + filesize + 19;
      response = malloc(responseSize);
      snprintf(response, responseSize, "%s%s%s\n%s%d\n\n%s", ok_header, contentType, 
               typeHTML, contentLength, filesize, fileContent);
      status = write(socket, response, responseSize);
    }

    if(strncmp(filetype, "jpeg", 4) == 0) {
      headerSize = strlen(contentType) + strlen(typeJPEG) + 8 + strlen(ok_header) 
                        + strlen(contentLength) + filesizeLen;
      responseSize = headerSize + filesize;
      header = malloc(headerSize);
      response = malloc(responseSize);
      snprintf(header, headerSize, "%s%s%s\r\n%s%d\r\n\r\n", ok_header, contentType, 
               typeJPEG, contentLength, filesize);
      memcpy(response, header, headerSize);
      memcpy(response + headerSize - 2, fileContent, filesize);
      status = write(socket, response, responseSize);
    }

    if(strncmp(filetype, "gif", 4) == 0) {
      headerSize = strlen(contentType) + strlen(typeGIF) + 8 + strlen(ok_header) 
                 + strlen(contentLength) + filesizeLen;
      responseSize = headerSize + filesize;
      header = malloc(headerSize);
      response = malloc(responseSize);
      snprintf(header, headerSize, "%s%s%s\r\n%s%d\r\n\r\n", ok_header, contentType, 
               typeGIF, contentLength, filesize);
      memcpy(response, header, headerSize);
      memcpy(response + headerSize - 2, fileContent, filesize);
      status = write(socket, response, responseSize);
    }

    if (status < 0) 
      error("ERROR writing to socket");
  }
  else {
    status = write(socket, file_not_found_response, strlen(file_not_found_response));
    if (status < 0) 
      error("ERROR writing to socket");
  }

}

