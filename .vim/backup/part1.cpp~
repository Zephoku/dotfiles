#include <omp.h>
#include <stdio.h>
#include <stdlib.h> 

int is_prime (int p) { 
  int i;
  if (p < 2) 
    return 0; 
  i = 2;
  while (i*i <= p) {
    if (p % i == 0) 
      return 0;
    i++; 
  }
  return 1; 
}

int find_prime_nums (int n, int t) {
  int i;
  int total = 0;
  if (n >= 2) {
    printf("%d", 2);
  }

  int maxThreads = omp_get_max_threads();
  if (t < maxThreads)
    omp_set_num_threads(t);
  else
    omp_set_num_threads(maxThreads);
 //#pragma omp parallel for schedule(dynamic,1) reduction(+:total)
  #pragma omp parallel for reduction(+:total)
  for(i = 3; i <= n;  i++) {
    if ( is_prime(i) ) {
      printf(", %d ", i);
      total++;
    }
  }
  printf("\n");
  return total;
}


int main(int argc, char* argv[]) {
  if (argc < 3)
    return -1;
  int maxNum = atoi(argv[1]);
  int threads = atoi(argv[2]);

  //debug print
  printf("Max prime numbers of %d using %d cores is: %d \n", maxNum, threads, find_prime_nums(maxNum, threads));
  

}
